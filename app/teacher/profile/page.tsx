"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { useAuth } from "@/app/context/AuthContext";
import { db } from "@/lib/firebase";
import { doc, updateDoc } from "firebase/firestore";
import { EmailAuthProvider, reauthenticateWithCredential, updatePassword } from "firebase/auth";
import { toast } from "sonner";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { Loader2, User, Lock } from "lucide-react";

type AimagSoum = {
  aimag: string;
  soums: string[];
};

export default function ProfilePage() {
  const { user, firebaseUser } = useAuth();

  // Form states
  const [locations, setLocations] = useState<AimagSoum[]>([]);
  const [profileData, setProfileData] = useState({
    school: "",
    grade: "",
    province: "",
    district: "",
    phone: "",
    teacherId: "",
  });
  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [loadingSave, setLoadingSave] = useState(false);
  const [loadingPassword, setLoadingPassword] = useState(false);

  // Load locations data
  useEffect(() => {
    fetch("/mn_aimag_soum_min.json").then((res) => res.json()).then(setLocations);
  }, []);

  // Populate form with user data
  useEffect(() => {
    if (user) {
      setProfileData({
        school: user.school || "",
        grade: user.grade || "",
        province: user.province || "",
        district: user.district || "",
        phone: user.phone || "",
        // ‚úÖ –ó–ê–°–í–ê–†–õ–ê–°–ê–ù: `any` —Ç”©—Ä–ª–∏–π–≥ –∏–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π –±–æ–ª–≥–æ–≤.
        teacherId: (user as { teacherId?: string }).teacherId || "",
      });
    }
  }, [user]);

  const selectedSoums = locations.find((loc) => loc.aimag === profileData.province)?.soums ?? [];

  const handleProfileChange = (field: keyof typeof profileData, value: string) => {
    setProfileData((prev) => ({ ...prev, [field]: value }));
    if (field === 'province') {
        setProfileData(prev => ({ ...prev, district: '' })); // Reset soum on aimag change
    }
  };
  
  const handlePasswordChange = (field: keyof typeof passwordData, value: string) => {
    setPasswordData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!user?.uid) return;
    setLoadingSave(true);
    try {
      await updateDoc(doc(db, "users", user.uid), profileData);
      toast.success("–ú—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞");
    } catch { // ‚úÖ –ó–ê–°–í–ê–†–õ–ê–°–ê–ù: –ê—à–∏–≥–ª–∞–≥–¥–∞–∞–≥“Ø–π 'err' —Ö—É–≤—å—Å–∞–≥—á–∏–π–≥ —É—Å—Ç–≥–∞–≤.
      toast.error("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", { description: "–ú—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π." });
    } finally {
      setLoadingSave(false);
    }
  };

  const handleChangePassword = async () => {
    if (!firebaseUser?.email) {
      toast.error("–ù—ç–≤—Ç—Ä—ç–ª—Ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω–≥“Ø–π.");
      return;
    }
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast.error("–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞.");
      return;
    }
    if (passwordData.newPassword.length < 6) {
        toast.error("–ù—É—É—Ü “Ø–≥ —Ö—ç—Ç –±–æ–≥–∏–Ω–æ –±–∞–π–Ω–∞", { description: "–î–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π."});
        return;
    }

    setLoadingPassword(true);
    try {
      const credential = EmailAuthProvider.credential(firebaseUser.email, passwordData.currentPassword);
      await reauthenticateWithCredential(firebaseUser, credential);
      await updatePassword(firebaseUser, passwordData.newPassword);
      toast.success("–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ.");
      setPasswordData({ currentPassword: "", newPassword: "", confirmPassword: "" });
    } catch { // ‚úÖ –ó–ê–°–í–ê–†–õ–ê–°–ê–ù: –ê—à–∏–≥–ª–∞–≥–¥–∞–∞–≥“Ø–π 'err' —Ö—É–≤—å—Å–∞–≥—á–∏–π–≥ —É—Å—Ç–≥–∞–≤.
      toast.error("–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", { description: "–û–¥–æ–æ–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –∑”©–≤ –æ—Ä—É—É–ª—Å–∞–Ω —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É." });
    } finally {
      setLoadingPassword(false);
    }
  };

  const photoURL = firebaseUser?.photoURL || user?.photoURL || "/assets/images/users/avatar-1.jpg";

  return (
    <div className="container mx-auto p-4 sm:p-6 lg:p-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight">–•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª</h1>
        <p className="text-muted-foreground">–•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥–æ–æ —ç–Ω–¥—ç—ç—Å —É–¥–∏—Ä–¥–Ω–∞ —É—É.</p>
      </div>

      <Separator className="mb-8" />
      
      <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
        {/* Profile Info Card */}
        <div className="md:col-span-1">
          <Card>
            <CardHeader className="items-center text-center">
              <Image src={photoURL} alt="Avatar" width={96} height={96} className="rounded-full mb-4 border" />
              <CardTitle>{user?.name || "–•—ç—Ä—ç–≥–ª—ç–≥—á"}</CardTitle>
              <CardDescription>{user?.email}</CardDescription>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground space-y-2">
                 {user?.province && <p>üìç {user.province}{user?.district ? `, ${user.district}` : ""}</p>}
                 {user?.school && <p>üè´ {user.school}</p>}
                 {user?.grade && <p>üìö {user.grade}</p>}
                 {user?.phone && <p>üìû {user.phone}</p>}
            </CardContent>
          </Card>
        </div>

        {/* Settings Forms */}
        <div className="md:col-span-2 space-y-8">
          {/* Personal Info Form */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><User size={20} /> –•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª</CardTitle>
              <CardDescription>–≠–Ω–¥—ç—ç—Å —Ç–∞ ”©”©—Ä–∏–π–Ω —Ö—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª–ª—ç—ç —à–∏–Ω—ç—á–ª—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                    <Label>–û–≤–æ–≥</Label>
                    <Input value={user?.lastName || ""} disabled />
                </div>
                <div className="space-y-2">
                    <Label>–ù—ç—Ä</Label>
                    <Input value={user?.name || ""} disabled />
                </div>
                <div className="space-y-2">
                    <Label>–°—É—Ä–≥—É—É–ª—å</Label>
                    <Input value={profileData.school} onChange={(e) => handleProfileChange("school", e.target.value)} />
                </div>
                <div className="space-y-2">
                    <Label>–ê–Ω–≥–∏</Label>
                    <Input value={profileData.grade} onChange={(e) => handleProfileChange("grade", e.target.value)} />
                </div>
                 <div className="space-y-2">
                    <Label>–ê–π–º–∞–≥</Label>
                    <Select value={profileData.province} onValueChange={(value) => handleProfileChange("province", value)}>
                        <SelectTrigger><SelectValue placeholder="–°–æ–Ω–≥–æ—Ö" /></SelectTrigger>
                        <SelectContent>
                            {locations.map((loc) => <SelectItem key={loc.aimag} value={loc.aimag}>{loc.aimag}</SelectItem>)}
                        </SelectContent>
                    </Select>
                 </div>
                 <div className="space-y-2">
                    <Label>–°—É–º / –î“Ø“Ø—Ä—ç–≥</Label>
                    <Select value={profileData.district} onValueChange={(value) => handleProfileChange("district", value)} disabled={!profileData.province}>
                        <SelectTrigger><SelectValue placeholder="–°–æ–Ω–≥–æ—Ö" /></SelectTrigger>
                        <SelectContent>
                            {selectedSoums.map((s) => <SelectItem key={s} value={s}>{s}</SelectItem>)}
                        </SelectContent>
                    </Select>
                 </div>
                 <div className="space-y-2">
                    <Label>–£—Ç–∞—Å</Label>
                    <Input type="tel" value={profileData.phone} onChange={(e) => handleProfileChange("phone", e.target.value)} />
                 </div>
              </div>
              <Button onClick={handleSave} disabled={loadingSave}>
                {loadingSave && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                –•–∞–¥–≥–∞–ª–∞—Ö
              </Button>
            </CardContent>
          </Card>

          {/* Password Form */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Lock size={20} /> –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö</CardTitle>
              <CardDescription>–ù—É—É—Ü “Ø–≥—ç—ç —Å–æ–ª–∏—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="currentPassword">–û–¥–æ–æ–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥</Label>
                <Input id="currentPassword" type="password" value={passwordData.currentPassword} onChange={(e) => handlePasswordChange("currentPassword", e.target.value)} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="newPassword">–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥</Label>
                <Input id="newPassword" type="password" value={passwordData.newPassword} onChange={(e) => handlePasswordChange("newPassword", e.target.value)} />
              </div>
               <div className="space-y-2">
                <Label htmlFor="confirmPassword">–ù—É—É—Ü “Ø–≥ –¥–∞–≤—Ç–∞—Ö</Label>
                <Input id="confirmPassword" type="password" value={passwordData.confirmPassword} onChange={(e) => handlePasswordChange("confirmPassword", e.target.value)} />
              </div>
              <Button onClick={handleChangePassword} disabled={loadingPassword}>
                 {loadingPassword && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

